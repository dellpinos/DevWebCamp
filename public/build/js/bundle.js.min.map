{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","seleccionarHora","hora","addEventListener","obtenerHorasDisponibles","json","buscarEventos","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","ponente","ponentePrevio","ponenteId","length","Regex","RegExp","nombre","toLowerCase","search","firstChild","removeChild","ponenteHTML","createElement","textContent","id","onclick","appendChild","noResultados","mostrarPonentes","respuesta","arrayPonentes","trim","apellido","formatearPonentes","obtenerPonentes","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function () {\n\n    const horas = document.querySelector('#horas');\n\n    if (horas) {\n\n        let busqueda = {\n            categoria_id: '',\n            dia: ''\n        }\n\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\n\n        const dias = document.querySelectorAll('[name=\"dia\"]');\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\n\n        categoria.addEventListener('change', terminoBusqueda);\n\n        dias.forEach(dia => {\n            dia.addEventListener('change', terminoBusqueda);\n        });\n\n        function terminoBusqueda(e) {\n            busqueda[e.target.name] = e.target.value;\n\n            //Reiniciar input hidden y selector de horas\n\n            inputHiddenHora.value = '';\n            inputHiddenDia.value = '';\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\n            if (horaPrevia) {\n                horaPrevia.classList.remove('horas__hora--seleccionada');\n            }\n\n            if (Object.values(busqueda).includes('')) {\n                return;\n            }\n            buscarEventos();\n        }\n\n        async function buscarEventos() {\n            const { categoria_id, dia } = busqueda;\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\n            const resultado = await fetch(url);\n            const eventos = await resultado.json();\n\n\n\n            obtenerHorasDisponibles(eventos);\n        }\n\n        function obtenerHorasDisponibles(eventos) {\n            // Reiniciar horas\n            const listadoHoras = document.querySelectorAll('#horas li');\n            listadoHoras.forEach( li => li.classList.add('horas__hora--deshabilitada'));\n\n\n            // Comprobar horas disponibles - modificar estilos\n            const horasTomadas = eventos.map(evento => evento.hora_id);\n\n            const listadoHorasArray = Array.from(listadoHoras);\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\n\n            resultado.forEach(li => li.classList.remove('horas__hora--deshabilitada'));\n\n\n\n            const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\n\n            horasDisponibles.forEach(hora => hora.addEventListener('click', seleccionarHora));\n\n            function seleccionarHora(e) {\n                // Deshabilitar hora previa\n                const horaPrevia = document.querySelector('.horas__hora--seleccionada');\n                if (horaPrevia) {\n                    horaPrevia.classList.remove('horas__hora--seleccionada');\n                }\n\n                // Agregar clase para cambiar el estilo del <li>\n                e.target.classList.add('horas__hora--seleccionada');\n                inputHiddenHora.value = e.target.dataset.horaId;\n\n                //Llenar el valu del input hidden\n\n                inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\n            }\n        }\n    }\n\n})();","(function () {\n\n    const ponentesInput = document.querySelector('#ponentes');\n    if (ponentesInput) {\n        let ponentes = [];\n        let ponentesFiltrados = [];\n        const listadoPonentes = document.querySelector('#listado-ponentes');\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\n\n        ponentesInput.addEventListener('input', buscarPonentes);\n\n        obtenerPonentes();\n\n        async function obtenerPonentes() {\n            const url = '/api/ponentes';\n            const respuesta = await fetch(url);\n            const resultado = await respuesta.json();\n\n            formatearPonentes(resultado);\n        }\n\n        function formatearPonentes(arrayPonentes = []) {\n            ponentes = arrayPonentes.map(ponente => {\n                return {\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\n                    id: ponente.id\n                }\n            });\n\n        }\n\n        function buscarPonentes(e) {\n            const busqueda = e.target.value;\n            if (busqueda.length > 3) {\n                const Regex = new RegExp(busqueda, 'i');\n\n                ponentesFiltrados = ponentes.filter(ponente => {\n                    if (ponente.nombre.toLowerCase().search(Regex) !== -1) {\n                        return ponente\n                    }\n                });\n            } else {\n                ponentesFiltrados = '';\n            }\n            mostrarPonentes();\n        }\n\n        function mostrarPonentes() {\n\n            while (listadoPonentes.firstChild) {\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\n            }\n            if (ponentesFiltrados.length > 0) {\n\n                ponentesFiltrados.forEach(ponente => {\n                    const ponenteHTML = document.createElement('LI');\n                    ponenteHTML.classList.add('listado-ponentes__ponente');\n                    ponenteHTML.textContent = ponente.nombre;\n                    ponenteHTML.dataset.ponenteId = ponente.id;\n                    ponenteHTML.onclick = seleccionarPonente;\n\n                    // AÃ±adir al DOM\n                    listadoPonentes.appendChild(ponenteHTML);\n                });\n            } else {\n                const noResultados = document.createElement('P');\n                noResultados.classList.add('listado-ponentes__no-resultado');\n                noResultados.textContent = \"No hay resultados\";\n                listadoPonentes.appendChild(noResultados);\n            }\n        }\n        function seleccionarPonente(e) {\n            const ponente = e.target;\n\n            // Remover clase previa\n            const ponentePrevio = document.querySelector('.listado-ponentes__ponente--seleccionado');\n            if (ponentePrevio) {\n                ponentePrevio.classList.remove('listado-ponentes__ponente--seleccionado');\n            }\n            ponente.classList.add('listado-ponentes__ponente--seleccionado');\n\n            ponenteHidden.value = ponente.dataset.ponenteId;\n        }\n    }\n\n\n\n})();","(function(){\n\n    const tagsInput = document.querySelector('#tags_input');\n\n    if(tagsInput) {\n\n        const tagsDiv = document.querySelector('#tags');\n        const tagsInputHidden = document.querySelector('[name=\"tags\"]');\n\n        let tags = [];\n        // Recuperar del input hidden\n        if(tagsInputHidden.value !== ''){\n            tags = tagsInputHidden.value.split(',');\n            mostrarTags();\n        }\n\n        // Escuchar los cambios en el input\n        tagsInput.addEventListener('keypress', guardarTag);\n\n        function guardarTag(e){\n            if(e.keyCode === 44) {\n                if(e.target.value.trim() === '' || e.target.value < 3) {\n                    return;\n                }\n                e.preventDefault();\n                tags = [...tags, e.target.value.trim()];\n                tagsInput.value = '';\n\n                mostrarTags();\n            }\n        }\n        \n        function mostrarTags() {\n            tagsDiv.textContent = '';\n            tags.forEach( tag => {\n                const etiqueta = document.createElement('LI');\n                etiqueta.classList.add('formulario__tag');\n                etiqueta.textContent = tag;\n                etiqueta.ondblclick = eliminarTag;\n                tagsDiv.appendChild(etiqueta);\n            });\n            actualizarInputHidden();\n        }\n\n        function eliminarTag(e){\n            e.target.remove(); // Tengo un bug, si el usuario repite un tag elimina todas las coincidencias del array pero no de la pantalla\n            tags = tags.filter( tag => tag !== e.target.textContent);\n            actualizarInputHidden();\n        }\n\n        function actualizarInputHidden() {\n            tagsInputHidden.value = tags.toString();\n        }\n    }\n})();\n\n"]}